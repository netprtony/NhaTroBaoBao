import React, { useState } from "react";
import Table from "/src/components/Table.jsx";
import Modal from "/src/components/Modal.jsx";
import ModalConfirm from "/src/components/ModalConfirm.jsx";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Reservations() {
  // Mock d·ªØ li·ªáu ƒë·∫∑t ph√≤ng tr∆∞·ªõc
  const [reservations, setReservations] = useState([
    {
      reservation_id: 1,
      full_name: "Nguy·ªÖn VƒÉn G",
      phone: "0901111222",
      email: "guest1@example.com",
      room_type: "Ph√≤ng ƒë∆°n",
      check_in: "2024-08-01",
      check_out: "2024-08-05",
      note: "Y√™u c·∫ßu ph√≤ng g·∫ßn c·ª≠a s·ªï",
      status: "Ch·ªù x√°c nh·∫≠n",
    },
    {
      reservation_id: 2,
      full_name: "Tr·∫ßn Th·ªã H",
      phone: "0912333444",
      email: "guest2@example.com",
      room_type: "Ph√≤ng ƒë√¥i",
      check_in: "2024-08-10",
      check_out: "2024-08-15",
      note: "",
      status: "ƒê√£ x√°c nh·∫≠n",
    },
    {
      reservation_id: 3,
      full_name: "L√™ VƒÉn I",
      phone: "0988777666",
      email: "guest3@example.com",
      room_type: "Ph√≤ng gia ƒë√¨nh",
      check_in: "2024-09-01",
      check_out: "2024-09-10",
      note: "",
      status: "ƒê√£ h·ªßy",
    },
  ]);

  const [showModal, setShowModal] = useState(false);
  const [editingReservation, setEditingReservation] = useState(null);
  const [form, setForm] = useState({
    full_name: "",
    phone: "",
    email: "",
    room_type: "",
    check_in: "",
    check_out: "",
    note: "",
    status: "Ch·ªù x√°c nh·∫≠n",
  });

  const [unsavedChanges, setUnsavedChanges] = useState(false);
  const [showConfirmExit, setShowConfirmExit] = useState(false);
  const [showConfirmDelete, setShowConfirmDelete] = useState(false);
  const [reservationToDelete, setReservationToDelete] = useState(null);

  const columns = [
    { label: "ID", accessor: "reservation_id" },
    { label: "H·ªç t√™n", accessor: "full_name" },
    { label: "S·ªë ƒëi·ªán tho·∫°i", accessor: "phone" },
    { label: "Email", accessor: "email" },
    { label: "Lo·∫°i ph√≤ng", accessor: "room_type" },
    { label: "Nh·∫≠n ph√≤ng", accessor: "check_in" },
    { label: "Tr·∫£ ph√≤ng", accessor: "check_out" },
    { label: "Ghi ch√∫", accessor: "note" },
    { label: "Tr·∫°ng th√°i", accessor: "status" },
    {
      label: "Thao t√°c",
      accessor: "actions",
      render: (_, reservation) => (
        <div className="d-flex gap-2 justify-content-center">
          <button className="btn btn-sm btn-warning" onClick={() => handleEdit(reservation)}>S·ª≠a</button>
          <button className="btn btn-sm btn-danger" onClick={() => handleDelete(reservation.reservation_id)}>X√≥a</button>
        </div>
      ),
    },
  ];

  const handleAdd = () => {
    setForm({
      full_name: "",
      phone: "",
      email: "",
      room_type: "",
      check_in: "",
      check_out: "",
      note: "",
      status: "Ch·ªù x√°c nh·∫≠n",
    });
    setEditingReservation(null);
    setUnsavedChanges(false);
    setShowModal(true);
  };

  const handleEdit = (reservation) => {
    setForm({
      full_name: reservation.full_name,
      phone: reservation.phone,
      email: reservation.email,
      room_type: reservation.room_type,
      check_in: reservation.check_in,
      check_out: reservation.check_out,
      note: reservation.note,
      status: reservation.status,
    });
    setEditingReservation(reservation);
    setUnsavedChanges(false);
    setShowModal(true);
  };

  const handleDelete = (reservationId) => {
    setReservationToDelete(reservationId);
    setShowConfirmDelete(true);
  };

  const confirmDelete = () => {
    setReservations((prev) => prev.filter((r) => r.reservation_id !== reservationToDelete));
    toast.success("üóëÔ∏è X√≥a ƒë·∫∑t ph√≤ng th√†nh c√¥ng!");
    setShowConfirmDelete(false);
    setReservationToDelete(null);
  };

  const handleSubmitReservation = () => {
    if (editingReservation) {
      // S·ª≠a ƒë·∫∑t ph√≤ng
      setReservations((prev) =>
        prev.map((r) =>
          r.reservation_id === editingReservation.reservation_id
            ? { ...r, ...form }
            : r
        )
      );
      toast.success("‚úèÔ∏è C·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng th√†nh c√¥ng!");
    } else {
      // Th√™m ƒë·∫∑t ph√≤ng m·ªõi
      setReservations((prev) => [
        ...prev,
        {
          ...form,
          reservation_id: prev.length ? Math.max(...prev.map((r) => r.reservation_id)) + 1 : 1,
        },
      ]);
      toast.success("‚úÖ Th√™m ƒë·∫∑t ph√≤ng th√†nh c√¥ng!");
    }
    setShowModal(false);
  };

  const handleCloseModal = () => {
    if (unsavedChanges) {
      setShowConfirmExit(true);
    } else {
      setShowModal(false);
    }
  };

  const handleFormChange = (field, value) => {
    setForm((prev) => ({ ...prev, [field]: value }));
    setUnsavedChanges(true);
  };

  return (
    <div className="container mt-4 position-relative">
      <div className="p-4 rounded shadow bg-white">
        <h3 className="mb-3">üìù Danh s√°ch ƒë·∫∑t ph√≤ng tr∆∞·ªõc</h3>
        <button className="btn btn-success mb-3" onClick={handleAdd}>
          ‚ûï Th√™m ƒë·∫∑t ph√≤ng
        </button>

        <Table columns={columns} data={reservations} />

        {/* Modal Th√™m / S·ª≠a */}
        <Modal
          isOpen={showModal}
          onClose={handleCloseModal}
          title={editingReservation ? "‚úèÔ∏è Ch·ªânh s·ª≠a ƒë·∫∑t ph√≤ng" : "‚ûï Th√™m ƒë·∫∑t ph√≤ng"}
          showConfirm
          onConfirm={handleSubmitReservation}
        >
          <form>
            <div className="row g-3">
              <div className="col-md-6">
                <label className="form-label">H·ªç t√™n</label>
                <input
                  type="text"
                  className="form-control"
                  value={form.full_name}
                  onChange={(e) => handleFormChange("full_name", e.target.value)}
                  required
                />
              </div>
              <div className="col-md-6">
                <label className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  className="form-control"
                  value={form.phone}
                  onChange={(e) => handleFormChange("phone", e.target.value)}
                  required
                />
              </div>
              <div className="col-md-6">
                <label className="form-label">Email</label>
                <input
                  type="email"
                  className="form-control"
                  value={form.email}
                  onChange={(e) => handleFormChange("email", e.target.value)}
                />
              </div>
              <div className="col-md-6">
                <label className="form-label">Lo·∫°i ph√≤ng</label>
                <input
                  type="text"
                  className="form-control"
                  value={form.room_type}
                  onChange={(e) => handleFormChange("room_type", e.target.value)}
                  required
                />
              </div>
              <div className="col-md-6">
                <label className="form-label">Nh·∫≠n ph√≤ng</label>
                <input
                  type="date"
                  className="form-control"
                  value={form.check_in}
                  onChange={(e) => handleFormChange("check_in", e.target.value)}
                  required
                />
              </div>
              <div className="col-md-6">
                <label className="form-label">Tr·∫£ ph√≤ng</label>
                <input
                  type="date"
                  className="form-control"
                  value={form.check_out}
                  onChange={(e) => handleFormChange("check_out", e.target.value)}
                  required
                />
              </div>
              <div className="col-12">
                <label className="form-label">Ghi ch√∫</label>
                <input
                  type="text"
                  className="form-control"
                  value={form.note}
                  onChange={(e) => handleFormChange("note", e.target.value)}
                />
              </div>
              <div className="col-12">
                <label className="form-label">Tr·∫°ng th√°i</label>
                <select
                  className="form-select"
                  value={form.status}
                  onChange={(e) => handleFormChange("status", e.target.value)}
                  required
                >
                  <option value="Ch·ªù x√°c nh·∫≠n">Ch·ªù x√°c nh·∫≠n</option>
                  <option value="ƒê√£ x√°c nh·∫≠n">ƒê√£ x√°c nh·∫≠n</option>
                  <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
                </select>
              </div>
            </div>
          </form>
        </Modal>

        {/* Modal x√°c nh·∫≠n x√≥a */}
        <ModalConfirm
          isOpen={showConfirmDelete}
          title="X√°c nh·∫≠n x√≥a"
          message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·∫∑t ph√≤ng n√†y kh√¥ng?"
          confirmText="X√≥a"
          cancelText="H·ªßy"
          onConfirm={confirmDelete}
          onClose={() => setShowConfirmDelete(false)}
        />

        {/* Modal x√°c nh·∫≠n tho√°t khi c√≥ thay ƒë·ªïi */}
        <ModalConfirm
          isOpen={showConfirmExit}
          title="Tho√°t m√† ch∆∞a l∆∞u?"
          message="B·∫°n c√≥ thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u. Tho√°t kh√¥ng?"
          confirmText="Tho√°t"
          cancelText="·ªû l·∫°i"
          onConfirm={() => {
            setShowModal(false);
            setShowConfirmExit(false);
            setUnsavedChanges(false);
          }}
          onClose={() => setShowConfirmExit(false)}
        />
      </div>

      <ToastContainer position="top-right" autoClose={3000} />
    </div>
  );
}